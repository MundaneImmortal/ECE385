//-------------------------------------------------------------------------
//      lab8.sv                                                          --
//      Christine Chen                                                   --
//      Fall 2014                                                        --
//                                                                       --
//      Modified by Po-Han Huang                                         --
//      10/06/2017                                                       --
//                                                                       --
//      Fall 2017 Distribution                                           --
//                                                                       --
//      For use with ECE 385 Lab 8                                       --
//      UIUC ECE Department                                              --
//-------------------------------------------------------------------------


module lab8( input               CLOCK_50,
             input        [3:0]  KEY,          //bit 0 is set up as Reset
             output logic [6:0]  HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7,
             // VGA Interface
             output logic [7:0]  VGA_R,        //VGA Red
                                 VGA_G,        //VGA Green
                                 VGA_B,        //VGA Blue
             output logic        VGA_CLK,      //VGA Clock
                                 VGA_SYNC_N,   //VGA Sync signal
                                 VGA_BLANK_N,  //VGA Blank signal
                                 VGA_VS,       //VGA virtical sync signal
                                 VGA_HS,       //VGA horizontal sync signal
             // CY7C67200 Interface
             inout  wire  [15:0] OTG_DATA,     //CY7C67200 Data bus 16 Bits
             output logic [1:0]  OTG_ADDR,     //CY7C67200 Address 2 Bits
             output logic        OTG_CS_N,     //CY7C67200 Chip Select
                                 OTG_RD_N,     //CY7C67200 Write
                                 OTG_WR_N,     //CY7C67200 Read
                                 OTG_RST_N,    //CY7C67200 Reset
             input               OTG_INT,      //CY7C67200 Interrupt
             // SDRAM Interface for Nios II Software
             output logic [12:0] DRAM_ADDR,    //SDRAM Address 13 Bits
             inout  wire  [31:0] DRAM_DQ,      //SDRAM Data 32 Bits
             output logic [1:0]  DRAM_BA,      //SDRAM Bank Address 2 Bits
             output logic [3:0]  DRAM_DQM,     //SDRAM Data Mast 4 Bits
             output logic        DRAM_RAS_N,   //SDRAM Row Address Strobe
                                 DRAM_CAS_N,   //SDRAM Column Address Strobe
                                 DRAM_CKE,     //SDRAM Clock Enable
                                 DRAM_WE_N,    //SDRAM Write Enable
                                 DRAM_CS_N,    //SDRAM Chip Select
                                 DRAM_CLK,     //SDRAM Clock
             // SRAM Interface
             output logic        SRAM_CE_N,
                                 SRAM_UB_N,
                                 SRAM_LB_N,
                                 SRAM_OE_N,
                                 SRAM_WE_N,
             output logic [19:0] SRAM_ADDR,
             inout wire   [15:0] SRAM_DQ,

             // P/S 2 Interface
             input logic PS2_KBCLK,
                         PS2_KBDAT
);
    
    logic Reset_h, Clk;	
    //needless
    logic [1:0] hpi_addr;
    logic [15:0] hpi_data_in, hpi_data_out;
    logic hpi_r, hpi_w, hpi_cs, hpi_reset;
    //keyboard signals
    logic [7:0] keycode;
    logic [7:0] keycode_1;
    logic press;    
    //Read data from SRAM 
    logic SRAM_CLK, SRAM_Read;
    logic [19:0] ADDR;
    logic [15:0] Data_Read;    
    //Visulization using two Frames
    logic frame;
    logic FB_Write;
    logic [9:0] FB_AddrX, FB_AddrY;
    logic [9:0] DrawX, DrawY;
    logic [4:0] ColorId, ColorId_Out, ColorId_Out_0, ColorId_Out_1;
    //Interface control
    logic [1:0] CONTROL; //not used yet.
    //collision detection map
    logic [640*480] Collision;
    //Player control
    logic [4:0] Player_Control[2];// {1'change weapon, 1'fire, 1' is_move, 2'move_direction}; 1 for yes and 0 for no; order:上左下右
    logic Player_Id;
    logic [1:0] Player_Direction[2];
    logic [9:0] Player_X[2];
    logic [9:0] Player_Y[2];
    logic [6:0] Player_HP[2]; //128
    logic Player_State[2];
    logic Ready_Player[2];
    logic Ready;
    assign Ready = Ready_Player[0] & Ready_Player[1];

    logic [1:0] Weapon[2];// 00: gun; 01: barrel; 10: block; 11: grenade.
    //Zombie control
    
    //Devil control
    //Barrel control
    //Block control
    //Grenade control
    //Fireball control




    
    assign Clk = CLOCK_50;
    always_ff @ (posedge Clk) begin
        Reset_h <= ~(KEY[0]);        // The push buttons are active low
    end
    
    // Use PLL to generate the 25MHZ VGA_CLK.
    vga_clk vga_clk_instance(.inclk0(Clk), .c0(VGA_CLK));
    // Output VGA control signals
    VGA_controller vga_controller_instance(.Clk, .Reset(Reset_h), .VGA_HS, .VGA_VS, .VGA_CLK, .VGA_BLANK_N,
                                .VGA_SYNC_N, .DrawX, .DrawY);

    // Use PLL to generate the 100MHZ SRAM_CLK to fully use 10ns latency
    sram_clk sram_clk_instance(.inclk0(Clk), .c0(SRAM_CLK));
    // Output SRAM control signals. Read_only here
    SRAM_controller tristate(.*, .Clk(SRAM_CLK), .Reset(Reset_h), .Read(SRAM_Read), .Write(1'b0), .Data_Write(16'h0000));
    
    // P/S 2 Keyboard signals
    keyboard keyboard_instance(.Clk(Clk),.psClk(PS2_KBCLK),.psData(PS2_KBDAT),.reset(Reset_h),.keyCode(keycode),.press(press));
    key_controller key_controller_instance(.Clk, .Reset(Reset_h), .keycode(keycode), .press(press), 
                                            .player_0(Player_Control[0]) ,.player_1(Player_Control[1]), .CONTROL(CONTROL));

    // generate the frame according to position of items in SRAM
    frame_drawer frame_drawer_instance(.Clk, .Reset(Reset_h), .frame_clk(VGA_VS), .Ready,
                                .Player_Direction(Player_Direction), .Player_Control(Player_Control), .Player_X(Player_X), 
                                .Player_Y(Player_Y), .Player_State(Player_State), .Player_HP(Player_HP),
                                .Data_Read, .SRAM_Read, .SRAM_Addr,
                                .frame, .FB_Write, .FB_AddrX, .FB_AddrY, .ColorId);
    //这个不对！！！！！！！！！！！！！！！！！
    frame_buffer frame_0(.Clk, .WE(FB_Write && frame), .Reset(Reset_h),
                        .Read_AddrX(DrawX), .Read_AddrY(DrawY),
                        .Write_AddrX(FB_AddrX), .Write_AddrY(FB_AddrY),
                        .ColorId_In(ColorId), .ColorId_Out(ColorId_Out_0));

    frame_buffer frame_1(.Clk, .WE(FB_Write && ~frame), .Reset(Reset_h),
                        .Read_AddrX(DrawX), .Read_AddrY(DrawY),
                        .Write_AddrX(FB_AddrX), .Write_AddrY(FB_AddrY),
                        .ColorId_In(ColorId), .ColorId_Out(ColorId_Out_1));

    assign ColorId_Out = frame ? ColorId_Out_1 : ColorId_Out_0;
    palette palette_instance(.ColorId(ColorId_Out), .VGA_R, .VGA_G, .VGA_B);

    // Player logic
    initial begin
        Ready_Player[0] = 1'b0;
        Ready_Player[1] = 1'b1;
        Player_Id = 1'b0;
        Player_Direction[0] = 2'b00;
        Player_Direction[1] = 2'b00;
        Player_X[0] = 10'd200;
        Player_X[1] = 10'd418;
        Player_Y[0] = 10'd198;
        Player_Y[1] = 10'd198;
        Player_State[0] = 1'b0;
        Player_State[1] = 1'b0;
        Player_HP[0] = 7'd128;
        Player_HP[1] = 7'd128;
    end
    player player_0(.Clk, .Reset(Reset_h), .frame_clk(VGA_VS), .Id(1'b0), .Player_Control(Player_Control[0]), 
        .Player_Direction_I(Player_direction[0]), .Player_X_I(Player_X[0]), .Player_Y_I(Player_Y[0]), 
        .Player_State_I(Player_State[0]), .Player_HP_I(Player_HP[0]), .Weapon_I(Weapon[0]), .Ready_I(Ready_Player[0])
        .Player_Direction(Player_direction[0]), .Player_X(Player_X[0]), .Player_Y(Player_Y[0]), 
        .Player_State(Player_State[0]), .Player_HP(Player_HP[0]), .Weapon(Weapon[0]), .Ready(Ready_Player[0]));

    player player_1(.Clk, .Reset(Reset_h), .frame_clk(VGA_VS), .Id(1'b1), .Player_Control(Player_Control[1]), 
        .Player_Direction_I(Player_direction[1]), .Player_X_I(Player_X[1]), .Player_Y_I(Player_Y[1]), 
        .Player_State_I(Player_State[1]), .Player_HP_I(Player_HP[1]), .Weapon_I(Weapon[1]), .Ready_I(Ready_Player[1])
        .Player_Direction(Player_direction[1]), .Player_X(Player_X[1]), .Player_Y(Player_Y[1]), 
        .Player_State(Player_State[1]), .Player_HP(Player_HP[1]), .Weapon(Weapon[1]), .Ready(Ready_Player[1]));
    // Display keycode on hex display
    // HexDriver hex_inst_0 (keycode[3:0], HEX0);
    // HexDriver hex_inst_1 (keycode[7:4], HEX1);
    // HexDriver hex_inst_2 (Tank_X[3:0], HEX2);
    // HexDriver hex_inst_3 (Tank_X[7:4], HEX3);
    // HexDriver hex_inst_4 ({3'b00, Tank_X[8]}, HEX4);
    // HexDriver hex_inst_5 (Tank_Y[3:0], HEX5);
    // HexDriver hex_inst_6 (Tank_Y[7:4], HEX6);
    // HexDriver hex_inst_7 ({3'b00, Tank_Id}, HEX7);

endmodule
